工厂方法模式（Factory Method），是23种设计模式之一。DP中是这么定义工厂方法模式的：

工厂方法模式定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。
所谓工厂方法模式，其实也像我们现实生活中的工厂，也是用来生产东西的，只不过我们代码中的工厂是用来生产对象的，不要想歪，此对象非彼对象233。

我们在开发过程中，总是要编写许许多多的类，当我们需要一些类的实例化对象时，如果总是不管三七二十一在代码上直接去new的话，倒也不是说不行，只是会导致代码比较糟糕、不灵活。例如，有些通用的功能类或者需要隐藏得比较深的类（隐藏类是方便后期更换），你在你写的代码上去new它的对象，那么如果后期这个类更名了、移除了、功能增删了，那么你的写的代码就有可能会崩掉，需要重新去修改这些new对象的地方才能再次让你的代码正常运行。这就是一种耦合度高的体现，所以我们首先应该依赖的是一个抽象的接口或父类，而不是依赖具体的子类，这也是依赖倒转原则强调的，除此之外我们最好不要在一些容易发生变动的地方直接通过子类类名去new对象，不然的话依旧会出现这种情况。所以我们应该把子类对象的创建交给别人去完成，而这个 “别人” 就是工厂。

如果学过简单工厂模式，就应该知道，工厂的目的是为了帮我们解决创建对象实例的问题，并且工厂能够隐藏类名及对象创建的细节，让我们无需关心对象的创建。不过如果只是简单工厂模式的话不能算是设计模式，它只能算是工厂方法模式的入门模式。

可能直接介绍什么是工厂方法模式的话，没那么容易明白它比简单工厂模式好在哪，毕竟在代码上看起来工厂方法模式要比简单工厂模式麻烦，需要写更多的代码。所以我们先来看一个使用简单工厂模式设计的代码，然后再过渡到使用工厂方法模式来重构代码，以此来对比它们的区别以及工厂方法模式的好处。

简单工厂模式最大的优点在于工厂类中，包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。就像之前使用简单工厂模式设计的计算器代码，客户端不用管该用哪个类的实例，只需要把相应的运算符号给工厂，工厂自动就给出了相应的实例，客户端只需要去做运算就可以了，不同的实例会实现不同的运算。当问题也就在这里，如果要加一个“求 M 数的 N 次方” 的功能，我们是一定需要给简单工厂类的方法里加分支条件的，这就等于说，我们不仅对扩展开发了，也对修改开放了，这样就违背了开-闭原则。而且如果简单工厂类里与创建对象相关的代码太多，也会导致耦合性高。